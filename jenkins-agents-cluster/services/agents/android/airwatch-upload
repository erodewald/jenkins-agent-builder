#!/usr/bin/env python

import json
import ntpath
import requests
import copy
from pprint import pprint
import argparse
import os

parser = argparse.ArgumentParser(description='upload a new Airwatch application version')
parser.add_argument('applicationName', type=str, help='application name to use when saving to Airwatch')
parser.add_argument('deviceModelID', type=int, help='Airwatch supported device model ID e.g. 5 for Android')
parser.add_argument('organizationGroupID', type=int, help='Airwatch organization group ID')
parser.add_argument('applicationPath', type=str, help='path to the application file to upload')

args = parser.parse_args()

if 'AW_TENANT_CODE' not in os.environ:
    raise Exception("AW_TENANT_CODE must be specified via environment variable.")

if 'AW_AUTHORIZATION' not in os.environ:
    raise Exception("AW_AUTHORIZATION must be specified via environment variable.")

class AirWatchClient():
    def __init__(self):
       
        # AirWatch API settings
        self.url = "https://cn888.awmdm.com"
        self.headers = {
            'aw-tenant-code': os.environ['AW_TENANT_CODE'],
            'accept': "application/json",
            'authorization': "Basic " + os.environ['AW_AUTHORIZATION'],
            'cache-control': "no-cache",
        }

        self.jsonHeaders = copy.copy(self.headers)
        self.jsonHeaders['content-type'] = 'application/json'

    def uploadBlob(self, filePath, organizationGroupID):
        filename = ntpath.basename(filePath)
        url = "{baseUrl}/api/mam/blobs/uploadblob?filename={filename}&organizationgroupid={organizationGroupID}&moduleType=Application".format(
            baseUrl = self.url,
            filename = filename,
            organizationGroupID = organizationGroupID
        )

        data = open(filePath, 'rb').read()

        response = requests.post(headers = self.headers, url = url, data = data)

        if response.status_code != 200 :
            self.raiseResponseException(response)

        content = json.loads(response.content)
        return content["Value"]

    def internalApplicationSave(self, applicationName, deviceModelID, blobID):
        url = "{baseUrl}/api/mam/apps/internal/begininstall".format(
            baseUrl = self.url,
        )        

        data = {
            'ApplicationName': applicationName,
            'BlobId': blobID,
            'AutoUpdateVersion': False,
            'DeviceType': deviceModelID,
            'PushMode': 'OnDemand',
            "SupportedModels": {
                "Model": [
                    {
                        "ModelId": deviceModelID,
                    }
                ]
            }
        }

        jsonData = json.dumps(data)

        response = requests.post(headers = self.jsonHeaders, url = url, data = jsonData)

        if response.status_code != 200 :
            self.raiseResponseException(response)


    def updateInternalApplication(self, applicationID, blobID):
        url = "{baseUrl}/api/mam/apps/internal/{applicationID}".format(
            baseUrl = self.url,
            applicationID = applicationID
        )        

        data = {
        }

        jsonData = json.dumps(data)

        response = requests.put(headers = self.jsonHeaders, url = url, data = jsonData)

        print response.status_code
        print response.content

    def getInternalApplication(self, applicationID):
        url = "{baseUrl}/api/mam/apps/internal/{applicationID}".format(
            baseUrl = self.url,
            applicationID = applicationID
        )

        data = {}

        jsonData = json.dumps(data)        

        response = requests.get(headers = self.jsonHeaders, url = url, data = jsonData)

        if response.status_code != 200 :
            self.raiseResponseException(response)

        return json.loads(response.content)

    def raiseResponseException(self, response):
        raise Exception('Got {status} response with content {content}'.format(
            status = response.status_code, 
            content = response.content
        ))

airWatchClient = AirWatchClient()

blobID = airWatchClient.uploadBlob(args.applicationPath, args.organizationGroupID)

airWatchClient.internalApplicationSave(args.applicationName, args.deviceModelID, blobID)
