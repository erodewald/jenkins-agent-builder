#!/usr/bin/env python

import json
import ntpath
import requests
import copy
from pprint import pprint
import argparse
import os
from distutils.version import StrictVersion

if 'AW_TENANT_CODE' not in os.environ:
    raise Exception(
        "AW_TENANT_CODE must be specified via environment variable.")

if 'AW_AUTHORIZATION' not in os.environ:
    raise Exception(
        "AW_AUTHORIZATION must be specified via environment variable.")


class AirWatchClient():
    def __init__(self):

        # AirWatch API settings
        self.url = "https://cn888.awmdm.com"
        self.headers = {
            'aw-tenant-code': os.environ['AW_TENANT_CODE'],
            'accept': "application/json",
            'authorization': "Basic " + os.environ['AW_AUTHORIZATION'],
            'cache-control': "no-cache",
        }

        self.jsonHeaders = copy.copy(self.headers)
        self.jsonHeaders['content-type'] = 'application/json'

    def uploadBlob(self, filePath, organizationGroupID):
        filename = ntpath.basename(filePath)
        url = "{baseUrl}/api/mam/blobs/uploadblob?filename={filename}&organizationgroupid={organizationGroupID}&moduleType=Application".format(
            baseUrl=self.url,
            filename=filename,
            organizationGroupID=organizationGroupID
        )

        data = open(filePath, 'rb').read()

        response = requests.post(headers=self.headers, url=url, data=data)

        if response.status_code != 200:
            self.raiseResponseException(response)

        content = json.loads(response.content)
        return content["Value"]

    def internalApplicationSave(self, applicationName, deviceModelID, blobID):
        url = "{baseUrl}/api/mam/apps/internal/begininstall".format(
            baseUrl=self.url,
        )

        data = {
            'ApplicationName': applicationName,
            'BlobId': blobID,
            'AutoUpdateVersion': False,
            'DeviceType': deviceModelID,
            'PushMode': 'On Demand',
            "SupportedModels": {
                "Model": [
                    {
                        "ModelId": deviceModelID,
                    }
                ]
            },
            "SmartGroups": []
        }

        jsonData = json.dumps(data)

        response = requests.post(
            headers=self.jsonHeaders, url=url, data=jsonData)

        if response.status_code != 200:
            self.raiseResponseException(response)

    def updateInternalApplication(self, applicationID):
        url = "{baseUrl}/api/mam/apps/internal/{applicationID}".format(
            baseUrl=self.url,
            applicationID=applicationID
        )

        data = {
            'ApplicationName': 'Test',
        }

        jsonData = json.dumps(data)

        response = requests.put(
            headers=self.jsonHeaders, url=url, data=jsonData)

        print response.status_code
        print response.content

    def getInternalApplication(self, applicationID):
        url = "{baseUrl}/api/mam/apps/internal/{applicationID}".format(
            baseUrl=self.url,
            applicationID=applicationID
        )

        data = {}

        jsonData = json.dumps(data)

        response = requests.get(
            headers=self.jsonHeaders, url=url, data=jsonData)

        if response.status_code != 200:
            self.raiseResponseException(response)

        return json.loads(response.content)

    def searchApplications(self, bundleID):
        url = "{baseUrl}/api/mam/apps/search?bundleid={bundleID}".format(
            baseUrl=self.url,
            bundleID=bundleID
        )

        response = requests.get(headers=self.jsonHeaders, url=url)

        if response.status_code != 200:
            self.raiseResponseException(response)

        return json.loads(response.content)

    def findLatestApplicationByBundleID(self, bundleID):
        searchResults = self.searchApplications(bundleID)

        result = max(searchResults['Application'],
                     key=lambda item: StrictVersion(item['AppVersion']))

        return result

    def raiseResponseException(self, response):
        raise Exception('Got {status} response with content {content}'.format(
            status=response.status_code,
            content=response.content
        ))


airWatchClient = AirWatchClient()


def upload(args):
    blobID = airWatchClient.uploadBlob(
        args.applicationPath, args.organizationGroupID)
    airWatchClient.internalApplicationSave(
        args.applicationName, args.deviceModelID, blobID)


def nextVersion(args):
    latestApplication = airWatchClient.findLatestApplicationByBundleID(
        args.bundleID)
    version = latestApplication["AppVersion"]
    numbers = version.split('.')
    print '.'.join([numbers[0], numbers[1], str(int(numbers[2]) + 1)])


parser = argparse.ArgumentParser(description='perform airwatch SDK actions')
subparsers = parser.add_subparsers(help='sub-command help')

uploadParser = subparsers.add_parser(
    'upload', description='upload a new Airwatch application version')
uploadParser.add_argument('applicationName', type=str,
                          help='application name to use when saving to Airwatch')
uploadParser.add_argument('deviceModelID', type=int,
                          help='Airwatch supported device model ID e.g. 5 for Android')
uploadParser.add_argument('organizationGroupID',
                          type=int, help='Airwatch organization group ID')
uploadParser.add_argument('applicationPath', type=str,
                          help='path to the application file to upload')
uploadParser.set_defaults(func=upload)

latestVersionParser = subparsers.add_parser(
    'next-version', description='retrieve latest version for an application bundle ID and increments the patch version by one')
latestVersionParser.add_argument(
    'bundleID', type=str, help='the application bundle ID to find the latest version for')
latestVersionParser.set_defaults(func=nextVersion)

args = parser.parse_args()
args.func(args)
